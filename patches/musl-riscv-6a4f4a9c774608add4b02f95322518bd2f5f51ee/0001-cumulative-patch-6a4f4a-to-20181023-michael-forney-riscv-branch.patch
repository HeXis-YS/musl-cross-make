From 8597ffb4dfb122176e4c3ec7f5397388963c941a Mon Sep 17 00:00:00 2001
From: Michael Forney <mforney@mforney.org>
Date: Thu, 18 Oct 2018 12:34:04 -0700
Subject: [PATCH 1/8] riscv32: Fix arch check in configure

---
 configure | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/configure b/configure
index 4d3d8b44..36309225 100755
--- a/configure
+++ b/configure
@@ -323,7 +323,7 @@ or1k*) ARCH=or1k ;;
 powerpc64*) ARCH=powerpc64 ;;
 powerpc*) ARCH=powerpc ;;
 riscv64*) ARCH=riscv64 ;;
-riscv*) ARCH=riscv32 ;;
+riscv32*) ARCH=riscv32 ;;
 sh[1-9bel-]*|sh|superh*) ARCH=sh ;;
 s390x*) ARCH=s390x ;;
 unknown) fail "$0: unable to detect target arch; try $0 --target=..." ;;
@@ -642,7 +642,7 @@ trycppif __LITTLE_ENDIAN__ "$t" && SUBARCH=${SUBARCH}le
 trycppif _SOFT_FLOAT "$t" && fail "$0: error: soft-float not supported on powerpc64"
 fi
 
-if test "$ARCH" = "riscv" || test "$ARCH" = "riscv64" ; then
+if test "$ARCH" = "riscv32" || test "$ARCH" = "riscv64" ; then
 trycppif "RISCVEB || _RISCVEB || __RISCVEB || __RISCVEB__" "$t" && SUBARCH=${SUBARCH}eb
 trycppif __riscv_soft_float "$t" && SUBARCH=${SUBARCH}-sf
 fi
-- 
2.18.0


From 3d06ad0561856b2ed6e03b022333348140bd0340 Mon Sep 17 00:00:00 2001
From: Michael Forney <mforney@mforney.org>
Date: Thu, 18 Oct 2018 12:37:15 -0700
Subject: [PATCH 2/8] riscv: Fix soft float check

---
 configure                    | 2 +-
 src/fenv/riscv32/fenv-sf.c   | 2 +-
 src/fenv/riscv32/fenv.S      | 2 +-
 src/fenv/riscv64/fenv-sf.c   | 2 +-
 src/fenv/riscv64/fenv.S      | 2 +-
 src/setjmp/riscv32/longjmp.S | 2 +-
 src/setjmp/riscv32/setjmp.S  | 2 +-
 src/setjmp/riscv64/longjmp.S | 2 +-
 src/setjmp/riscv64/setjmp.S  | 2 +-
 9 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/configure b/configure
index 36309225..b27a0d8a 100755
--- a/configure
+++ b/configure
@@ -644,7 +644,7 @@ fi
 
 if test "$ARCH" = "riscv32" || test "$ARCH" = "riscv64" ; then
 trycppif "RISCVEB || _RISCVEB || __RISCVEB || __RISCVEB__" "$t" && SUBARCH=${SUBARCH}eb
-trycppif __riscv_soft_float "$t" && SUBARCH=${SUBARCH}-sf
+trycppif __riscv_float_abi_soft "$t" && SUBARCH=${SUBARCH}-sf
 fi
 
 if test "$ARCH" = "sh" ; then
diff --git a/src/fenv/riscv32/fenv-sf.c b/src/fenv/riscv32/fenv-sf.c
index 9ff7b792..ecd3cb5c 100644
--- a/src/fenv/riscv32/fenv-sf.c
+++ b/src/fenv/riscv32/fenv-sf.c
@@ -1,3 +1,3 @@
-#ifdef __riscv_soft_float
+#ifndef __riscv_flen
 #include "../fenv.c"
 #endif
diff --git a/src/fenv/riscv32/fenv.S b/src/fenv/riscv32/fenv.S
index a55aa4ab..97f74dd6 100644
--- a/src/fenv/riscv32/fenv.S
+++ b/src/fenv/riscv32/fenv.S
@@ -1,4 +1,4 @@
-#ifndef __riscv_soft_float
+#ifdef __riscv_flen
 
 .global feclearexcept
 .type feclearexcept, %function
diff --git a/src/fenv/riscv64/fenv-sf.c b/src/fenv/riscv64/fenv-sf.c
index 9ff7b792..ecd3cb5c 100644
--- a/src/fenv/riscv64/fenv-sf.c
+++ b/src/fenv/riscv64/fenv-sf.c
@@ -1,3 +1,3 @@
-#ifdef __riscv_soft_float
+#ifndef __riscv_flen
 #include "../fenv.c"
 #endif
diff --git a/src/fenv/riscv64/fenv.S b/src/fenv/riscv64/fenv.S
index a55aa4ab..97f74dd6 100644
--- a/src/fenv/riscv64/fenv.S
+++ b/src/fenv/riscv64/fenv.S
@@ -1,4 +1,4 @@
-#ifndef __riscv_soft_float
+#ifdef __riscv_flen
 
 .global feclearexcept
 .type feclearexcept, %function
diff --git a/src/setjmp/riscv32/longjmp.S b/src/setjmp/riscv32/longjmp.S
index fbf2439a..ca7e2674 100644
--- a/src/setjmp/riscv32/longjmp.S
+++ b/src/setjmp/riscv32/longjmp.S
@@ -22,7 +22,7 @@ longjmp:
         lw sp,    48(a0)
         lw ra,    52(a0)
 
-#ifndef __riscv_soft_float
+#ifndef __riscv_float_abi_soft
         fld fs0,  56(a0)
         fld fs1,  64(a0)
         fld fs2,  72(a0)
diff --git a/src/setjmp/riscv32/setjmp.S b/src/setjmp/riscv32/setjmp.S
index 14d5414d..49273186 100644
--- a/src/setjmp/riscv32/setjmp.S
+++ b/src/setjmp/riscv32/setjmp.S
@@ -22,7 +22,7 @@ setjmp:
         sw sp,    48(a0)
         sw ra,    52(a0)
 
-#ifndef __riscv_soft_float
+#ifndef __riscv_float_abi_soft
         fsd fs0,  56(a0)
         fsd fs1,  64(a0)
         fsd fs2,  72(a0)
diff --git a/src/setjmp/riscv64/longjmp.S b/src/setjmp/riscv64/longjmp.S
index d87a1afe..46cc596e 100644
--- a/src/setjmp/riscv64/longjmp.S
+++ b/src/setjmp/riscv64/longjmp.S
@@ -22,7 +22,7 @@ longjmp:
         ld sp,    96(a0)
         ld ra,    104(a0)
 
-#ifndef __riscv_soft_float
+#ifndef __riscv_float_abi_soft
         fld fs0,  112(a0)
         fld fs1,  120(a0)
         fld fs2,  128(a0)
diff --git a/src/setjmp/riscv64/setjmp.S b/src/setjmp/riscv64/setjmp.S
index abc05aa5..0b58a672 100644
--- a/src/setjmp/riscv64/setjmp.S
+++ b/src/setjmp/riscv64/setjmp.S
@@ -22,7 +22,7 @@ setjmp:
         sd sp,    96(a0)
         sd ra,    104(a0)
 
-#ifndef __riscv_soft_float
+#ifndef __riscv_float_abi_soft
         fsd fs0,  112(a0)
         fsd fs1,  120(a0)
         fsd fs2,  128(a0)
-- 
2.18.0


From 988d64a480bdae3a3ac7158e018198af8495304f Mon Sep 17 00:00:00 2001
From: Michael Forney <mforney@mforney.org>
Date: Thu, 18 Oct 2018 12:32:47 -0700
Subject: [PATCH 3/8] riscv: Support soft float

---
 src/math/riscv32/copysign.c  | 15 +++++++++++++++
 src/math/riscv32/copysign.s  |  5 -----
 src/math/riscv32/copysignf.c | 15 +++++++++++++++
 src/math/riscv32/copysignf.s |  5 -----
 src/math/riscv32/fabs.c      | 15 +++++++++++++++
 src/math/riscv32/fabs.s      |  5 -----
 src/math/riscv32/fabsf.c     | 15 +++++++++++++++
 src/math/riscv32/fabsf.s     |  5 -----
 src/math/riscv32/fma.c       | 15 +++++++++++++++
 src/math/riscv32/fma.s       |  5 -----
 src/math/riscv32/fmaf.c      | 15 +++++++++++++++
 src/math/riscv32/fmaf.s      |  5 -----
 src/math/riscv32/fmax.c      | 15 +++++++++++++++
 src/math/riscv32/fmax.s      |  5 -----
 src/math/riscv32/fmaxf.c     | 15 +++++++++++++++
 src/math/riscv32/fmaxf.s     |  5 -----
 src/math/riscv32/fmin.c      | 15 +++++++++++++++
 src/math/riscv32/fmin.s      |  5 -----
 src/math/riscv32/fminf.c     | 15 +++++++++++++++
 src/math/riscv32/fminf.s     |  5 -----
 src/math/riscv32/sqrt.c      | 15 +++++++++++++++
 src/math/riscv32/sqrt.s      |  5 -----
 src/math/riscv32/sqrtf.c     | 15 +++++++++++++++
 src/math/riscv32/sqrtf.s     |  5 -----
 src/math/riscv64/copysign.c  | 15 +++++++++++++++
 src/math/riscv64/copysign.s  |  5 -----
 src/math/riscv64/copysignf.c | 15 +++++++++++++++
 src/math/riscv64/copysignf.s |  5 -----
 src/math/riscv64/fabs.c      | 15 +++++++++++++++
 src/math/riscv64/fabs.s      |  5 -----
 src/math/riscv64/fabsf.c     | 15 +++++++++++++++
 src/math/riscv64/fabsf.s     |  5 -----
 src/math/riscv64/fma.c       | 15 +++++++++++++++
 src/math/riscv64/fma.s       |  5 -----
 src/math/riscv64/fmaf.c      | 15 +++++++++++++++
 src/math/riscv64/fmaf.s      |  5 -----
 src/math/riscv64/fmax.c      | 15 +++++++++++++++
 src/math/riscv64/fmax.s      |  5 -----
 src/math/riscv64/fmaxf.c     | 15 +++++++++++++++
 src/math/riscv64/fmaxf.s     |  5 -----
 src/math/riscv64/fmin.c      | 15 +++++++++++++++
 src/math/riscv64/fmin.s      |  5 -----
 src/math/riscv64/fminf.c     | 15 +++++++++++++++
 src/math/riscv64/fminf.s     |  5 -----
 src/math/riscv64/sqrt.c      | 15 +++++++++++++++
 src/math/riscv64/sqrt.s      |  5 -----
 src/math/riscv64/sqrtf.c     | 15 +++++++++++++++
 src/math/riscv64/sqrtf.s     |  5 -----
 48 files changed, 360 insertions(+), 120 deletions(-)
 create mode 100644 src/math/riscv32/copysign.c
 delete mode 100644 src/math/riscv32/copysign.s
 create mode 100644 src/math/riscv32/copysignf.c
 delete mode 100644 src/math/riscv32/copysignf.s
 create mode 100644 src/math/riscv32/fabs.c
 delete mode 100644 src/math/riscv32/fabs.s
 create mode 100644 src/math/riscv32/fabsf.c
 delete mode 100644 src/math/riscv32/fabsf.s
 create mode 100644 src/math/riscv32/fma.c
 delete mode 100644 src/math/riscv32/fma.s
 create mode 100644 src/math/riscv32/fmaf.c
 delete mode 100644 src/math/riscv32/fmaf.s
 create mode 100644 src/math/riscv32/fmax.c
 delete mode 100644 src/math/riscv32/fmax.s
 create mode 100644 src/math/riscv32/fmaxf.c
 delete mode 100644 src/math/riscv32/fmaxf.s
 create mode 100644 src/math/riscv32/fmin.c
 delete mode 100644 src/math/riscv32/fmin.s
 create mode 100644 src/math/riscv32/fminf.c
 delete mode 100644 src/math/riscv32/fminf.s
 create mode 100644 src/math/riscv32/sqrt.c
 delete mode 100644 src/math/riscv32/sqrt.s
 create mode 100644 src/math/riscv32/sqrtf.c
 delete mode 100644 src/math/riscv32/sqrtf.s
 create mode 100644 src/math/riscv64/copysign.c
 delete mode 100644 src/math/riscv64/copysign.s
 create mode 100644 src/math/riscv64/copysignf.c
 delete mode 100644 src/math/riscv64/copysignf.s
 create mode 100644 src/math/riscv64/fabs.c
 delete mode 100644 src/math/riscv64/fabs.s
 create mode 100644 src/math/riscv64/fabsf.c
 delete mode 100644 src/math/riscv64/fabsf.s
 create mode 100644 src/math/riscv64/fma.c
 delete mode 100644 src/math/riscv64/fma.s
 create mode 100644 src/math/riscv64/fmaf.c
 delete mode 100644 src/math/riscv64/fmaf.s
 create mode 100644 src/math/riscv64/fmax.c
 delete mode 100644 src/math/riscv64/fmax.s
 create mode 100644 src/math/riscv64/fmaxf.c
 delete mode 100644 src/math/riscv64/fmaxf.s
 create mode 100644 src/math/riscv64/fmin.c
 delete mode 100644 src/math/riscv64/fmin.s
 create mode 100644 src/math/riscv64/fminf.c
 delete mode 100644 src/math/riscv64/fminf.s
 create mode 100644 src/math/riscv64/sqrt.c
 delete mode 100644 src/math/riscv64/sqrt.s
 create mode 100644 src/math/riscv64/sqrtf.c
 delete mode 100644 src/math/riscv64/sqrtf.s

diff --git a/src/math/riscv32/copysign.c b/src/math/riscv32/copysign.c
new file mode 100644
index 00000000..c7854178
--- /dev/null
+++ b/src/math/riscv32/copysign.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 64
+
+double copysign(double x, double y)
+{
+	__asm__ ("fsgnj.d %0, %1, %2" : "=f"(x) : "f"(x), "f"(y));
+	return x;
+}
+
+#else
+
+#include "../copysign.c"
+
+#endif
diff --git a/src/math/riscv32/copysign.s b/src/math/riscv32/copysign.s
deleted file mode 100644
index 81afa8b2..00000000
--- a/src/math/riscv32/copysign.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global copysign
-.type   copysign, %function
-copysign:
-        fsgnj.d fa0, fa0, fa1
-        ret
diff --git a/src/math/riscv32/copysignf.c b/src/math/riscv32/copysignf.c
new file mode 100644
index 00000000..a125611a
--- /dev/null
+++ b/src/math/riscv32/copysignf.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 32
+
+float copysignf(float x, float y)
+{
+	__asm__ ("fsgnj.s %0, %1, %2" : "=f"(x) : "f"(x), "f"(y));
+	return x;
+}
+
+#else
+
+#include "../copysignf.c"
+
+#endif
diff --git a/src/math/riscv32/copysignf.s b/src/math/riscv32/copysignf.s
deleted file mode 100644
index fe36f909..00000000
--- a/src/math/riscv32/copysignf.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global copysignf
-.type   copysignf, %function
-copysignf:
-        fsgnj.s fa0, fa0, fa1
-        ret
diff --git a/src/math/riscv32/fabs.c b/src/math/riscv32/fabs.c
new file mode 100644
index 00000000..5290b6f0
--- /dev/null
+++ b/src/math/riscv32/fabs.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 64
+
+double fabs(double x)
+{
+	__asm__ ("fabs.d %0, %1" : "=f"(x) : "f"(x));
+	return x;
+}
+
+#else
+
+#include "../fabs.c"
+
+#endif
diff --git a/src/math/riscv32/fabs.s b/src/math/riscv32/fabs.s
deleted file mode 100644
index 27def33c..00000000
--- a/src/math/riscv32/fabs.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global fabs
-.type   fabs, %function
-fabs:
-        fabs.d fa0, fa0
-        ret
diff --git a/src/math/riscv32/fabsf.c b/src/math/riscv32/fabsf.c
new file mode 100644
index 00000000..f5032e35
--- /dev/null
+++ b/src/math/riscv32/fabsf.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 32
+
+float fabsf(float x)
+{
+	__asm__ ("fabs.s %0, %1" : "=f"(x) : "f"(x));
+	return x;
+}
+
+#else
+
+#include "../fabsf.c"
+
+#endif
diff --git a/src/math/riscv32/fabsf.s b/src/math/riscv32/fabsf.s
deleted file mode 100644
index 8e0b9d64..00000000
--- a/src/math/riscv32/fabsf.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global fabsf
-.type   fabsf, %function
-fabsf:
-        fabs.s fa0, fa0
-        ret
diff --git a/src/math/riscv32/fma.c b/src/math/riscv32/fma.c
new file mode 100644
index 00000000..99b05713
--- /dev/null
+++ b/src/math/riscv32/fma.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 64
+
+double fma(double x, double y, double z)
+{
+	__asm__ ("fmadd.d %0, %1, %2, %3" : "=f"(x) : "f"(x), "f"(y), "f"(z));
+	return x;
+}
+
+#else
+
+#include "../fma.c"
+
+#endif
diff --git a/src/math/riscv32/fma.s b/src/math/riscv32/fma.s
deleted file mode 100644
index 17e1d136..00000000
--- a/src/math/riscv32/fma.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global fma
-.type   fma, %function
-fma:
-        fmadd.d fa0, fa0, fa1, fa2
-        ret
diff --git a/src/math/riscv32/fmaf.c b/src/math/riscv32/fmaf.c
new file mode 100644
index 00000000..f9dc47ed
--- /dev/null
+++ b/src/math/riscv32/fmaf.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 32
+
+float fmaf(float x, float y, float z)
+{
+	__asm__ ("fmadd.s %0, %1, %2, %3" : "=f"(x) : "f"(x), "f"(y), "f"(z));
+	return x;
+}
+
+#else
+
+#include "../fmaf.c"
+
+#endif
diff --git a/src/math/riscv32/fmaf.s b/src/math/riscv32/fmaf.s
deleted file mode 100644
index cfe17100..00000000
--- a/src/math/riscv32/fmaf.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global fmaf
-.type   fmaf, %function
-fmaf:
-        fmadd.s fa0, fa0, fa1, fa2
-        ret
diff --git a/src/math/riscv32/fmax.c b/src/math/riscv32/fmax.c
new file mode 100644
index 00000000..023709cd
--- /dev/null
+++ b/src/math/riscv32/fmax.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 64
+
+double fmax(double x, double y)
+{
+	__asm__ ("fmax.d %0, %1, %2" : "=f"(x) : "f"(x), "f"(y));
+	return x;
+}
+
+#else
+
+#include "../fmax.c"
+
+#endif
diff --git a/src/math/riscv32/fmax.s b/src/math/riscv32/fmax.s
deleted file mode 100644
index 40655d37..00000000
--- a/src/math/riscv32/fmax.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global fmax
-.type   fmax, %function
-fmax:
-        fmax.d fa0, fa0, fa1
-        ret
diff --git a/src/math/riscv32/fmaxf.c b/src/math/riscv32/fmaxf.c
new file mode 100644
index 00000000..863d2bd1
--- /dev/null
+++ b/src/math/riscv32/fmaxf.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 32
+
+float fmaxf(float x, float y)
+{
+	__asm__ ("fmax.s %0, %1, %2" : "=f"(x) : "f"(x), "f"(y));
+	return x;
+}
+
+#else
+
+#include "../fmaxf.c"
+
+#endif
diff --git a/src/math/riscv32/fmaxf.s b/src/math/riscv32/fmaxf.s
deleted file mode 100644
index 490b6e91..00000000
--- a/src/math/riscv32/fmaxf.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global fmaxf
-.type   fmaxf, %function
-fmaxf:
-        fmax.s fa0, fa0, fa1
-        ret
diff --git a/src/math/riscv32/fmin.c b/src/math/riscv32/fmin.c
new file mode 100644
index 00000000..a4e3b067
--- /dev/null
+++ b/src/math/riscv32/fmin.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 64
+
+double fmin(double x, double y)
+{
+	__asm__ ("fmin.d %0, %1, %2" : "=f"(x) : "f"(x), "f"(y));
+	return x;
+}
+
+#else
+
+#include "../fmin.c"
+
+#endif
diff --git a/src/math/riscv32/fmin.s b/src/math/riscv32/fmin.s
deleted file mode 100644
index 97f72e08..00000000
--- a/src/math/riscv32/fmin.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global fmin
-.type   fmin, %function
-fmin:
-        fmin.d fa0, fa0, fa1
-        ret
diff --git a/src/math/riscv32/fminf.c b/src/math/riscv32/fminf.c
new file mode 100644
index 00000000..32156e80
--- /dev/null
+++ b/src/math/riscv32/fminf.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 32
+
+float fminf(float x, float y)
+{
+	__asm__ ("fmin.s %0, %1, %2" : "=f"(x) : "f"(x), "f"(y));
+	return x;
+}
+
+#else
+
+#include "../fminf.c"
+
+#endif
diff --git a/src/math/riscv32/fminf.s b/src/math/riscv32/fminf.s
deleted file mode 100644
index 4f8e55ee..00000000
--- a/src/math/riscv32/fminf.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global fminf
-.type   fminf, %function
-fminf:
-        fmin.s fa0, fa0, fa1
-        ret
diff --git a/src/math/riscv32/sqrt.c b/src/math/riscv32/sqrt.c
new file mode 100644
index 00000000..75c34f7a
--- /dev/null
+++ b/src/math/riscv32/sqrt.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 64
+
+double sqrt(double x)
+{
+	__asm__ ("sqrt.d %0, %1" : "=f"(x) : "f"(x));
+	return x;
+}
+
+#else
+
+#include "../sqrt.c"
+
+#endif
diff --git a/src/math/riscv32/sqrt.s b/src/math/riscv32/sqrt.s
deleted file mode 100644
index a4c8b3ea..00000000
--- a/src/math/riscv32/sqrt.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global sqrt
-.type   sqrt, %function
-sqrt:
-        fsqrt.d fa0, fa0
-        ret
diff --git a/src/math/riscv32/sqrtf.c b/src/math/riscv32/sqrtf.c
new file mode 100644
index 00000000..610c2cf8
--- /dev/null
+++ b/src/math/riscv32/sqrtf.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 32
+
+float sqrtf(float x)
+{
+	__asm__ ("fsqrt.s %0, %1" : "=f"(x) : "f"(x));
+	return x;
+}
+
+#else
+
+#include "../sqrtf.c"
+
+#endif
diff --git a/src/math/riscv32/sqrtf.s b/src/math/riscv32/sqrtf.s
deleted file mode 100644
index ff7abcf3..00000000
--- a/src/math/riscv32/sqrtf.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global sqrtf
-.type   sqrtf, %function
-sqrtf:
-        fsqrt.s fa0, fa0
-        ret
diff --git a/src/math/riscv64/copysign.c b/src/math/riscv64/copysign.c
new file mode 100644
index 00000000..c7854178
--- /dev/null
+++ b/src/math/riscv64/copysign.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 64
+
+double copysign(double x, double y)
+{
+	__asm__ ("fsgnj.d %0, %1, %2" : "=f"(x) : "f"(x), "f"(y));
+	return x;
+}
+
+#else
+
+#include "../copysign.c"
+
+#endif
diff --git a/src/math/riscv64/copysign.s b/src/math/riscv64/copysign.s
deleted file mode 100644
index 81afa8b2..00000000
--- a/src/math/riscv64/copysign.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global copysign
-.type   copysign, %function
-copysign:
-        fsgnj.d fa0, fa0, fa1
-        ret
diff --git a/src/math/riscv64/copysignf.c b/src/math/riscv64/copysignf.c
new file mode 100644
index 00000000..a125611a
--- /dev/null
+++ b/src/math/riscv64/copysignf.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 32
+
+float copysignf(float x, float y)
+{
+	__asm__ ("fsgnj.s %0, %1, %2" : "=f"(x) : "f"(x), "f"(y));
+	return x;
+}
+
+#else
+
+#include "../copysignf.c"
+
+#endif
diff --git a/src/math/riscv64/copysignf.s b/src/math/riscv64/copysignf.s
deleted file mode 100644
index fe36f909..00000000
--- a/src/math/riscv64/copysignf.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global copysignf
-.type   copysignf, %function
-copysignf:
-        fsgnj.s fa0, fa0, fa1
-        ret
diff --git a/src/math/riscv64/fabs.c b/src/math/riscv64/fabs.c
new file mode 100644
index 00000000..5290b6f0
--- /dev/null
+++ b/src/math/riscv64/fabs.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 64
+
+double fabs(double x)
+{
+	__asm__ ("fabs.d %0, %1" : "=f"(x) : "f"(x));
+	return x;
+}
+
+#else
+
+#include "../fabs.c"
+
+#endif
diff --git a/src/math/riscv64/fabs.s b/src/math/riscv64/fabs.s
deleted file mode 100644
index 27def33c..00000000
--- a/src/math/riscv64/fabs.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global fabs
-.type   fabs, %function
-fabs:
-        fabs.d fa0, fa0
-        ret
diff --git a/src/math/riscv64/fabsf.c b/src/math/riscv64/fabsf.c
new file mode 100644
index 00000000..f5032e35
--- /dev/null
+++ b/src/math/riscv64/fabsf.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 32
+
+float fabsf(float x)
+{
+	__asm__ ("fabs.s %0, %1" : "=f"(x) : "f"(x));
+	return x;
+}
+
+#else
+
+#include "../fabsf.c"
+
+#endif
diff --git a/src/math/riscv64/fabsf.s b/src/math/riscv64/fabsf.s
deleted file mode 100644
index 8e0b9d64..00000000
--- a/src/math/riscv64/fabsf.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global fabsf
-.type   fabsf, %function
-fabsf:
-        fabs.s fa0, fa0
-        ret
diff --git a/src/math/riscv64/fma.c b/src/math/riscv64/fma.c
new file mode 100644
index 00000000..99b05713
--- /dev/null
+++ b/src/math/riscv64/fma.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 64
+
+double fma(double x, double y, double z)
+{
+	__asm__ ("fmadd.d %0, %1, %2, %3" : "=f"(x) : "f"(x), "f"(y), "f"(z));
+	return x;
+}
+
+#else
+
+#include "../fma.c"
+
+#endif
diff --git a/src/math/riscv64/fma.s b/src/math/riscv64/fma.s
deleted file mode 100644
index 17e1d136..00000000
--- a/src/math/riscv64/fma.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global fma
-.type   fma, %function
-fma:
-        fmadd.d fa0, fa0, fa1, fa2
-        ret
diff --git a/src/math/riscv64/fmaf.c b/src/math/riscv64/fmaf.c
new file mode 100644
index 00000000..f9dc47ed
--- /dev/null
+++ b/src/math/riscv64/fmaf.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 32
+
+float fmaf(float x, float y, float z)
+{
+	__asm__ ("fmadd.s %0, %1, %2, %3" : "=f"(x) : "f"(x), "f"(y), "f"(z));
+	return x;
+}
+
+#else
+
+#include "../fmaf.c"
+
+#endif
diff --git a/src/math/riscv64/fmaf.s b/src/math/riscv64/fmaf.s
deleted file mode 100644
index cfe17100..00000000
--- a/src/math/riscv64/fmaf.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global fmaf
-.type   fmaf, %function
-fmaf:
-        fmadd.s fa0, fa0, fa1, fa2
-        ret
diff --git a/src/math/riscv64/fmax.c b/src/math/riscv64/fmax.c
new file mode 100644
index 00000000..023709cd
--- /dev/null
+++ b/src/math/riscv64/fmax.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 64
+
+double fmax(double x, double y)
+{
+	__asm__ ("fmax.d %0, %1, %2" : "=f"(x) : "f"(x), "f"(y));
+	return x;
+}
+
+#else
+
+#include "../fmax.c"
+
+#endif
diff --git a/src/math/riscv64/fmax.s b/src/math/riscv64/fmax.s
deleted file mode 100644
index 40655d37..00000000
--- a/src/math/riscv64/fmax.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global fmax
-.type   fmax, %function
-fmax:
-        fmax.d fa0, fa0, fa1
-        ret
diff --git a/src/math/riscv64/fmaxf.c b/src/math/riscv64/fmaxf.c
new file mode 100644
index 00000000..863d2bd1
--- /dev/null
+++ b/src/math/riscv64/fmaxf.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 32
+
+float fmaxf(float x, float y)
+{
+	__asm__ ("fmax.s %0, %1, %2" : "=f"(x) : "f"(x), "f"(y));
+	return x;
+}
+
+#else
+
+#include "../fmaxf.c"
+
+#endif
diff --git a/src/math/riscv64/fmaxf.s b/src/math/riscv64/fmaxf.s
deleted file mode 100644
index 490b6e91..00000000
--- a/src/math/riscv64/fmaxf.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global fmaxf
-.type   fmaxf, %function
-fmaxf:
-        fmax.s fa0, fa0, fa1
-        ret
diff --git a/src/math/riscv64/fmin.c b/src/math/riscv64/fmin.c
new file mode 100644
index 00000000..a4e3b067
--- /dev/null
+++ b/src/math/riscv64/fmin.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 64
+
+double fmin(double x, double y)
+{
+	__asm__ ("fmin.d %0, %1, %2" : "=f"(x) : "f"(x), "f"(y));
+	return x;
+}
+
+#else
+
+#include "../fmin.c"
+
+#endif
diff --git a/src/math/riscv64/fmin.s b/src/math/riscv64/fmin.s
deleted file mode 100644
index 97f72e08..00000000
--- a/src/math/riscv64/fmin.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global fmin
-.type   fmin, %function
-fmin:
-        fmin.d fa0, fa0, fa1
-        ret
diff --git a/src/math/riscv64/fminf.c b/src/math/riscv64/fminf.c
new file mode 100644
index 00000000..32156e80
--- /dev/null
+++ b/src/math/riscv64/fminf.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 32
+
+float fminf(float x, float y)
+{
+	__asm__ ("fmin.s %0, %1, %2" : "=f"(x) : "f"(x), "f"(y));
+	return x;
+}
+
+#else
+
+#include "../fminf.c"
+
+#endif
diff --git a/src/math/riscv64/fminf.s b/src/math/riscv64/fminf.s
deleted file mode 100644
index 4f8e55ee..00000000
--- a/src/math/riscv64/fminf.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global fminf
-.type   fminf, %function
-fminf:
-        fmin.s fa0, fa0, fa1
-        ret
diff --git a/src/math/riscv64/sqrt.c b/src/math/riscv64/sqrt.c
new file mode 100644
index 00000000..75c34f7a
--- /dev/null
+++ b/src/math/riscv64/sqrt.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 64
+
+double sqrt(double x)
+{
+	__asm__ ("sqrt.d %0, %1" : "=f"(x) : "f"(x));
+	return x;
+}
+
+#else
+
+#include "../sqrt.c"
+
+#endif
diff --git a/src/math/riscv64/sqrt.s b/src/math/riscv64/sqrt.s
deleted file mode 100644
index a4c8b3ea..00000000
--- a/src/math/riscv64/sqrt.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global sqrt
-.type   sqrt, %function
-sqrt:
-        fsqrt.d fa0, fa0
-        ret
diff --git a/src/math/riscv64/sqrtf.c b/src/math/riscv64/sqrtf.c
new file mode 100644
index 00000000..610c2cf8
--- /dev/null
+++ b/src/math/riscv64/sqrtf.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __riscv_flen >= 32
+
+float sqrtf(float x)
+{
+	__asm__ ("fsqrt.s %0, %1" : "=f"(x) : "f"(x));
+	return x;
+}
+
+#else
+
+#include "../sqrtf.c"
+
+#endif
diff --git a/src/math/riscv64/sqrtf.s b/src/math/riscv64/sqrtf.s
deleted file mode 100644
index ff7abcf3..00000000
--- a/src/math/riscv64/sqrtf.s
+++ /dev/null
@@ -1,5 +0,0 @@
-.global sqrtf
-.type   sqrtf, %function
-sqrtf:
-        fsqrt.s fa0, fa0
-        ret
-- 
2.18.0


From 353286984fd3c89a2037c69816b0fe9ae8729733 Mon Sep 17 00:00:00 2001
From: Michael Forney <mforney@mforney.org>
Date: Thu, 18 Oct 2018 12:40:04 -0700
Subject: [PATCH 4/8] riscv: Don't define SYS_renameat

---
 arch/riscv32/bits/syscall.h.in | 1 -
 arch/riscv64/bits/syscall.h.in | 1 -
 src/stdio/rename.c             | 4 +++-
 src/unistd/renameat.c          | 4 ++++
 4 files changed, 7 insertions(+), 3 deletions(-)

diff --git a/arch/riscv32/bits/syscall.h.in b/arch/riscv32/bits/syscall.h.in
index 3c81c107..2024ac95 100644
--- a/arch/riscv32/bits/syscall.h.in
+++ b/arch/riscv32/bits/syscall.h.in
@@ -36,7 +36,6 @@
 #define __NR_unlinkat 35
 #define __NR_symlinkat 36
 #define __NR_linkat 37
-#define __NR_renameat 38
 #define __NR_umount2 39
 #define __NR_mount 40
 #define __NR_pivot_root 41
diff --git a/arch/riscv64/bits/syscall.h.in b/arch/riscv64/bits/syscall.h.in
index 3c81c107..2024ac95 100644
--- a/arch/riscv64/bits/syscall.h.in
+++ b/arch/riscv64/bits/syscall.h.in
@@ -36,7 +36,6 @@
 #define __NR_unlinkat 35
 #define __NR_symlinkat 36
 #define __NR_linkat 37
-#define __NR_renameat 38
 #define __NR_umount2 39
 #define __NR_mount 40
 #define __NR_pivot_root 41
diff --git a/src/stdio/rename.c b/src/stdio/rename.c
index 04c90c01..67692b8d 100644
--- a/src/stdio/rename.c
+++ b/src/stdio/rename.c
@@ -6,7 +6,9 @@ int rename(const char *old, const char *new)
 {
 #ifdef SYS_rename
 	return syscall(SYS_rename, old, new);
-#else
+#elif defined(SYS_renameat)
 	return syscall(SYS_renameat, AT_FDCWD, old, AT_FDCWD, new);
+#else
+	return syscall(SYS_renameat2, AT_FDCWD, old, AT_FDCWD, new, 0);
 #endif
 }
diff --git a/src/unistd/renameat.c b/src/unistd/renameat.c
index 12574822..c3b40a25 100644
--- a/src/unistd/renameat.c
+++ b/src/unistd/renameat.c
@@ -3,5 +3,9 @@
 
 int renameat(int oldfd, const char *old, int newfd, const char *new)
 {
+#ifdef SYS_renameat
 	return syscall(SYS_renameat, oldfd, old, newfd, new);
+#else
+	return syscall(SYS_renameat2, oldfd, old, newfd, new, 0);
+#endif
 }
-- 
2.18.0


From 7b8e81ec68f7770705eeba9faf603e63b09241ce Mon Sep 17 00:00:00 2001
From: Michael Forney <mforney@mforney.org>
Date: Thu, 18 Oct 2018 12:40:17 -0700
Subject: [PATCH 5/8] riscv32: Fix syscall names

---
 arch/riscv32/bits/syscall.h.in | 21 +++++++++++----------
 1 file changed, 11 insertions(+), 10 deletions(-)

diff --git a/arch/riscv32/bits/syscall.h.in b/arch/riscv32/bits/syscall.h.in
index 2024ac95..04ff3e42 100644
--- a/arch/riscv32/bits/syscall.h.in
+++ b/arch/riscv32/bits/syscall.h.in
@@ -23,7 +23,7 @@
 #define __NR_epoll_pwait 22
 #define __NR_dup 23
 #define __NR_dup3 24
-#define __NR_fcntl 25
+#define __NR_fcntl64 25
 #define __NR_inotify_init1 26
 #define __NR_inotify_add_watch 27
 #define __NR_inotify_rm_watch 28
@@ -40,10 +40,10 @@
 #define __NR_mount 40
 #define __NR_pivot_root 41
 #define __NR_nfsservctl 42
-#define __NR_statfs 43
-#define __NR_fstatfs 44
-#define __NR_truncate 45
-#define __NR_ftruncate 46
+#define __NR_statfs64 43
+#define __NR_fstatfs64 44
+#define __NR_truncate64 45
+#define __NR_ftruncate64 46
 #define __NR_fallocate 47
 #define __NR_faccessat 48
 #define __NR_chdir 49
@@ -59,7 +59,8 @@
 #define __NR_pipe2 59
 #define __NR_quotactl 60
 #define __NR_getdents64 61
-#define __NR_lseek 62
+#define __NR_llseek 62
+#define __NR__llseek __NR_llseek
 #define __NR_read 63
 #define __NR_write 64
 #define __NR_readv 65
@@ -76,8 +77,8 @@
 #define __NR_splice 76
 #define __NR_tee 77
 #define __NR_readlinkat 78
-#define __NR_fstatat 79
-#define __NR_fstat 80
+#define __NR_fstatat64 79
+#define __NR_fstat64 80
 #define __NR_sync 81
 #define __NR_fsync 82
 #define __NR_fdatasync 83
@@ -219,8 +220,8 @@
 #define __NR_keyctl 219
 #define __NR_clone 220
 #define __NR_execve 221
-#define __NR_mmap 222
-#define __NR_fadvise64 223
+#define __NR_mmap2 222
+#define __NR_fadvise64_64 223
 #define __NR_swapon 224
 #define __NR_swapoff 225
 #define __NR_mprotect 226
-- 
2.18.0


From dd59ec7eba1f32b865568ea9196be6ff5adb8717 Mon Sep 17 00:00:00 2001
From: Michael Forney <mforney@mforney.org>
Date: Thu, 18 Oct 2018 13:11:50 -0700
Subject: [PATCH 6/8] riscv: Fix fcntl constants

---
 arch/riscv32/bits/fcntl.h | 38 --------------------------------------
 arch/riscv64/bits/fcntl.h | 10 +++++-----
 2 files changed, 5 insertions(+), 43 deletions(-)
 delete mode 100644 arch/riscv32/bits/fcntl.h

diff --git a/arch/riscv32/bits/fcntl.h b/arch/riscv32/bits/fcntl.h
deleted file mode 100644
index 92787976..00000000
--- a/arch/riscv32/bits/fcntl.h
+++ /dev/null
@@ -1,38 +0,0 @@
-#define O_CREAT        0100
-#define O_EXCL         0200
-#define O_NOCTTY       0400
-#define O_TRUNC       01000
-#define O_APPEND      02000
-#define O_NONBLOCK    04000
-#define O_DSYNC      010000
-#define O_SYNC     04010000
-#define O_RSYNC    04010000
-#define O_DIRECTORY  040000
-#define O_NOFOLLOW  0100000
-#define O_CLOEXEC  02000000
-
-#define O_ASYNC      020000
-#define O_DIRECT    0200000
-#define O_LARGEFILE 0400000
-#define O_NOATIME  01000000
-#define O_PATH    010000000
-#define O_TMPFILE 020040000
-#define O_NDELAY O_NONBLOCK
-
-#define F_DUPFD  0
-#define F_GETFD  1
-#define F_SETFD  2
-#define F_GETFL  3
-#define F_SETFL  4
-#define F_GETLK  5
-#define F_SETLK  6
-#define F_SETLKW 7
-#define F_SETOWN 8
-#define F_GETOWN 9
-#define F_SETSIG 10
-#define F_GETSIG 11
-
-#define F_SETOWN_EX 15
-#define F_GETOWN_EX 16
-
-#define F_GETOWNER_UIDS 17
diff --git a/arch/riscv64/bits/fcntl.h b/arch/riscv64/bits/fcntl.h
index 92787976..ecb4d18f 100644
--- a/arch/riscv64/bits/fcntl.h
+++ b/arch/riscv64/bits/fcntl.h
@@ -7,16 +7,16 @@
 #define O_DSYNC      010000
 #define O_SYNC     04010000
 #define O_RSYNC    04010000
-#define O_DIRECTORY  040000
-#define O_NOFOLLOW  0100000
+#define O_DIRECTORY 0200000
+#define O_NOFOLLOW  0400000
 #define O_CLOEXEC  02000000
 
 #define O_ASYNC      020000
-#define O_DIRECT    0200000
-#define O_LARGEFILE 0400000
+#define O_DIRECT     040000
+#define O_LARGEFILE 0100000
 #define O_NOATIME  01000000
 #define O_PATH    010000000
-#define O_TMPFILE 020040000
+#define O_TMPFILE 020200000
 #define O_NDELAY O_NONBLOCK
 
 #define F_DUPFD  0
-- 
2.18.0


From ad8f00c0ab86c463c12404fe8356031ab4a5e7e4 Mon Sep 17 00:00:00 2001
From: Michael Forney <mforney@mforney.org>
Date: Thu, 18 Oct 2018 20:26:03 -0700
Subject: [PATCH 7/8] riscv32: Don't align register pairs for 64-bit syscall
 arguments

---
 arch/riscv32/syscall_arch.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/arch/riscv32/syscall_arch.h b/arch/riscv32/syscall_arch.h
index bc60d1f6..90d2da3c 100644
--- a/arch/riscv32/syscall_arch.h
+++ b/arch/riscv32/syscall_arch.h
@@ -1,7 +1,7 @@
 #define __SYSCALL_LL_E(x) \
 ((union { long long ll; long l[2]; }){ .ll = x }).l[0], \
 ((union { long long ll; long l[2]; }){ .ll = x }).l[1]
-#define __SYSCALL_LL_O(x) 0, __SYSCALL_LL_E((x))
+#define __SYSCALL_LL_O(x) __SYSCALL_LL_E((x))
 
 #define __asm_syscall(...) \
 	__asm__ __volatile__ ("scall\n\t" \
-- 
2.18.0


From 99ab803bdf1abc8b9468f74e5e867549b2bc2002 Mon Sep 17 00:00:00 2001
From: Michael Forney <mforney@mforney.org>
Date: Sat, 20 Oct 2018 10:14:04 -0700
Subject: [PATCH 8/8] riscv: Fix inline asm for sqrt

This was accidentally broken when converting the .s files to C and inline
asm (988d64a480bdae3a3ac7158e018198af8495304f).

Patch by Fabrice Bellard.
---
 src/math/riscv32/sqrt.c | 2 +-
 src/math/riscv64/sqrt.c | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/math/riscv32/sqrt.c b/src/math/riscv32/sqrt.c
index 75c34f7a..867a504c 100644
--- a/src/math/riscv32/sqrt.c
+++ b/src/math/riscv32/sqrt.c
@@ -4,7 +4,7 @@
 
 double sqrt(double x)
 {
-	__asm__ ("sqrt.d %0, %1" : "=f"(x) : "f"(x));
+	__asm__ ("fsqrt.d %0, %1" : "=f"(x) : "f"(x));
 	return x;
 }
 
diff --git a/src/math/riscv64/sqrt.c b/src/math/riscv64/sqrt.c
index 75c34f7a..867a504c 100644
--- a/src/math/riscv64/sqrt.c
+++ b/src/math/riscv64/sqrt.c
@@ -4,7 +4,7 @@
 
 double sqrt(double x)
 {
-	__asm__ ("sqrt.d %0, %1" : "=f"(x) : "f"(x));
+	__asm__ ("fsqrt.d %0, %1" : "=f"(x) : "f"(x));
 	return x;
 }
 
-- 
2.18.0

